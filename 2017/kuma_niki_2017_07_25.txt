熊熊日記 (2017_07_25)
              .`!''/, ,. .  , ,, .    ,-     ,   .  
             -`'  _ `  `" `"'`~:~'~'~'":/.\,!`-./!,
             >-  :,'     ,-'  .:  ._         ., `,-`
              `.                    '       `.:  |-.
               -;    `,                 `      ," 
               ,:   "                    ,"   "
              -;                              ';
              ".                         ..'  ;"
              ':  `.     ()_.---._()  .''    ,"
               =!  '`   .'    "    `.      ."
             .-"""-.    !    " "    !  ,-`""''.
      _____.'  .'   ;___`._`.___,'_.'_:    .'  :_______
           :_      .'                 `._     ,'
ʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔʕ•ᴥ•ʔ
對動漫的喜歡就如對程式的喜歡。最近越來越能夠專注於調整、整合好自己寫的程式。
最近小發現：
    寫程式或建模是種對一個無法雕塑完美的原石所進行的不斷加工。
        也由於是不可能完美的 (語意合理化、近乎於意識 (SoC)的部分)
            其中有很多可以動態平衡調節的東西
                (強制對現存程式的理解、記憶 + 功能性提升 <-> 寫容易理解、記憶的代碼 + 功能性降低)
        因此不應該過於講究完美性。。
    其中修正現存的瑕疵的效率又會受到其他完美的部份的影響。
    如何讓這樣的修正、accessibility盡可能達到高效、掌控，是重要的課題。
        因此需要對寫程式的任何細微動作進行反思。
